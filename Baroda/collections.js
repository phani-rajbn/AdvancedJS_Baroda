//collections.js
//Set feature in JS. Store unique values...
function setExample(){
	var cards = new Set();
	cards.add("Ace-Spade");
	cards.add("Two-Spade");
	console.log(cards.size + " is the total no items in the list");

	let it = cards.entries();
	console.log(it.next().value);
	if(cards.has("Two-Spade"))//check for the item within the collection...
		console.log("We have it");
	else
		cards.add("Two-Spade")	
	cards.delete("Ace-Spade")
	cards.forEach((val)=> console.log(val));
}
//Internally Set uses hashCode, an id generated by the JS Engine while the object is being created. U could use this hashCode  to determine whether the 2 objects are of the same type. 
//setExample();
//Associative Array where the data has key-value pair(Dictionary)
function mapExample(){
	var users = new Map();
	users.set("phani", "welcome123");
	users.set("gopal", "apple123");
	users.set("venki", "test123");
	users.set("ram", "user123");
	users.forEach( (value, key) => console.log(`${key}: ${value}`));
	for(key of users.keys())
		console.log(users.get(key))
}
mapExample();
//weakMap and weakSet are the newer classes that are similar to Map and Set respectively. Here the items will be garbage collected if the items are dereferenced in the course of time. This will have a slight performance issue as the objects are not gaurenteed to be available if the location is unused. 